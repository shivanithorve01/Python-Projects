# -*- coding: utf-8 -*-
"""Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13h2Lvt2eVhwz2nHBdnZaJ_dy_bEXsnRm

**Step 1 : Creating a Dataset**
"""

import pandas as pd

data = {
    'Daily Walking' : [1, 2, 3, 4, 5, 7, 10, 12, 15, 20] ,
    'Weight Loss' : [0, 0.5, 0.6, 1, 2, 4, 5, 5.5, 6, 7]
}

df = pd.DataFrame(data)
df

"""**Step 2 : Splitting the Training and Testing Data**"""

from sklearn.model_selection import train_test_split

x = df['Daily Walking']
y = df['Weight Loss']
print(x)
print(y)

"""We will divide data into training and testing data"""

# To divide data in 70:30 ratio make test_size = 0.33 i.e 30%
# random_state : Whenever used Scikit-learn algorithm (sklearn. model_selection. train_test_split),
#                is recommended to used the parameter ( random_state=42) to produce the same results across a different run
x_train , x_test , y_train , y_test = train_test_split(x,y,test_size = 0.30 ,random_state= 42)

print(x_train)
print(x_test)
print(y_train)
print(y_test)

"""Data Visualisation

**Step 3 : Scatter Plot for training data**

we will use this scatter plot later and will fit output from testing data to know how built model is accurate
"""

import matplotlib.pyplot as plt

plt.scatter(x_train,y_train)
#To add title to graph
plt.title(" Scatter Plot between training data ")

#To add labels to X and Y axes
plt.xlabel('Daily Walking')
plt.ylabel('Weight Loss')

plt.show()

"""**Step 4 : Make x_train to constant 1 and create x_train_new using statsmodel.api**"""

import statsmodels.api as sm

#Change x_train data to constant 1
x_train_new = sm.add_constant(x_train)
print(x_train_new)

"""**Step 5 : Predict output from the trained data using OLS**

fit the predicted y output from the training data. \
Print parameters B0 and B1 of predicted y of training data
"""

y_train_pred = sm.OLS(y_train,x_train_new).fit()

print(y_train_pred.params)

"""**Step 6 : Test on unseen data**

Add constant 1 to x of testing data to make new x testing data and print it.
"""

x_test_new = sm.add_constant(x_test)
print(x_test_new)

"""**Step 7 : Predict the y of testing data using y of training data with x of testing data as input**"""

pred_y = y_train_pred.predict(x_test_new)
print(pred_y)

"""**Step 8 : Evaluate the Model** 

Error should be minimum for more accurate model. Hence RMSE value should be near to zero.
"""

from sklearn.metrics import r2_score , mean_squared_error

import numpy as np

R2 = np.abs(r2_score(y_test , pred_y))
print("R2 = ",R2)
RMSE = np.sqrt(mean_squared_error(y_test,pred_y))
print("RMSE = ",RMSE)